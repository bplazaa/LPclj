Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    COMA
    CONJ
    COUNT
    DDOT
    DEF
    DEFN
    DO
    FALSE
    FOR
    GET
    IF
    IGUAL
    LBRACE
    LCOR
    MAYORQUE
    MENORQUE
    NOT
    NTH
    NUMERAL
    OR
    POP
    PRINT
    PRINTF
    QUOTE
    RBRACE
    RCOR
    READ
    READLINE
    STR
    STRING
    THEN
    TRUE
    WHILE

Grammar

Rule 0     S' -> expression
Rule 1     expression -> PLUS term term
Rule 2     expression -> expression MINUS term
Rule 3     expression -> term
Rule 4     operadoresMat -> PLUS
Rule 5     operadoresMat -> MINUS
Rule 6     operadoresMat -> TIMES
Rule 7     operadoresMat -> DIVIDE
Rule 8     term -> term TIMES factor
Rule 9     term -> term DIVIDE factor
Rule 10    valor -> NUMBER
Rule 11    valor -> ID
Rule 12    term -> factor
Rule 13    factor -> NUMBER
Rule 14    factor -> LPAREN expression RPAREN

Terminals, with rules where they appear

AND                  : 
COMA                 : 
CONJ                 : 
COUNT                : 
DDOT                 : 
DEF                  : 
DEFN                 : 
DIVIDE               : 7 9
DO                   : 
FALSE                : 
FOR                  : 
GET                  : 
ID                   : 11
IF                   : 
IGUAL                : 
LBRACE               : 
LCOR                 : 
LPAREN               : 14
MAYORQUE             : 
MENORQUE             : 
MINUS                : 2 5
NOT                  : 
NTH                  : 
NUMBER               : 10 13
NUMERAL              : 
OR                   : 
PLUS                 : 1 4
POP                  : 
PRINT                : 
PRINTF               : 
QUOTE                : 
RBRACE               : 
RCOR                 : 
READ                 : 
READLINE             : 
RPAREN               : 14
STR                  : 
STRING               : 
THEN                 : 
TIMES                : 6 8
TRUE                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

expression           : 2 14 0
factor               : 8 9 12
operadoresMat        : 
term                 : 1 1 2 3 8 9
valor                : 

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . PLUS term term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (12) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . LPAREN expression RPAREN

    PLUS            shift and go to state 2
    NUMBER          shift and go to state 5
    LPAREN          shift and go to state 6

    expression                     shift and go to state 1
    term                           shift and go to state 3
    factor                         shift and go to state 4

state 1

    (0) S' -> expression .
    (2) expression -> expression . MINUS term

    MINUS           shift and go to state 7


state 2

    (1) expression -> PLUS . term term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (12) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 5
    LPAREN          shift and go to state 6

    term                           shift and go to state 8
    factor                         shift and go to state 4

state 3

    (3) expression -> term .
    (8) term -> term . TIMES factor
    (9) term -> term . DIVIDE factor

    MINUS           reduce using rule 3 (expression -> term .)
    $end            reduce using rule 3 (expression -> term .)
    RPAREN          reduce using rule 3 (expression -> term .)
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10


state 4

    (12) term -> factor .

    TIMES           reduce using rule 12 (term -> factor .)
    DIVIDE          reduce using rule 12 (term -> factor .)
    MINUS           reduce using rule 12 (term -> factor .)
    $end            reduce using rule 12 (term -> factor .)
    NUMBER          reduce using rule 12 (term -> factor .)
    LPAREN          reduce using rule 12 (term -> factor .)
    RPAREN          reduce using rule 12 (term -> factor .)


state 5

    (13) factor -> NUMBER .

    TIMES           reduce using rule 13 (factor -> NUMBER .)
    DIVIDE          reduce using rule 13 (factor -> NUMBER .)
    MINUS           reduce using rule 13 (factor -> NUMBER .)
    $end            reduce using rule 13 (factor -> NUMBER .)
    NUMBER          reduce using rule 13 (factor -> NUMBER .)
    LPAREN          reduce using rule 13 (factor -> NUMBER .)
    RPAREN          reduce using rule 13 (factor -> NUMBER .)


state 6

    (14) factor -> LPAREN . expression RPAREN
    (1) expression -> . PLUS term term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (12) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . LPAREN expression RPAREN

    PLUS            shift and go to state 2
    NUMBER          shift and go to state 5
    LPAREN          shift and go to state 6

    expression                     shift and go to state 11
    term                           shift and go to state 3
    factor                         shift and go to state 4

state 7

    (2) expression -> expression MINUS . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (12) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 5
    LPAREN          shift and go to state 6

    term                           shift and go to state 12
    factor                         shift and go to state 4

state 8

    (1) expression -> PLUS term . term
    (8) term -> term . TIMES factor
    (9) term -> term . DIVIDE factor
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (12) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . LPAREN expression RPAREN

    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10
    NUMBER          shift and go to state 5
    LPAREN          shift and go to state 6

    term                           shift and go to state 13
    factor                         shift and go to state 4

state 9

    (8) term -> term TIMES . factor
    (13) factor -> . NUMBER
    (14) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 5
    LPAREN          shift and go to state 6

    factor                         shift and go to state 14

state 10

    (9) term -> term DIVIDE . factor
    (13) factor -> . NUMBER
    (14) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 5
    LPAREN          shift and go to state 6

    factor                         shift and go to state 15

state 11

    (14) factor -> LPAREN expression . RPAREN
    (2) expression -> expression . MINUS term

    RPAREN          shift and go to state 16
    MINUS           shift and go to state 7


state 12

    (2) expression -> expression MINUS term .
    (8) term -> term . TIMES factor
    (9) term -> term . DIVIDE factor

    MINUS           reduce using rule 2 (expression -> expression MINUS term .)
    $end            reduce using rule 2 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 2 (expression -> expression MINUS term .)
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10


state 13

    (1) expression -> PLUS term term .
    (8) term -> term . TIMES factor
    (9) term -> term . DIVIDE factor

    MINUS           reduce using rule 1 (expression -> PLUS term term .)
    $end            reduce using rule 1 (expression -> PLUS term term .)
    RPAREN          reduce using rule 1 (expression -> PLUS term term .)
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10


state 14

    (8) term -> term TIMES factor .

    TIMES           reduce using rule 8 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 8 (term -> term TIMES factor .)
    MINUS           reduce using rule 8 (term -> term TIMES factor .)
    $end            reduce using rule 8 (term -> term TIMES factor .)
    NUMBER          reduce using rule 8 (term -> term TIMES factor .)
    LPAREN          reduce using rule 8 (term -> term TIMES factor .)
    RPAREN          reduce using rule 8 (term -> term TIMES factor .)


state 15

    (9) term -> term DIVIDE factor .

    TIMES           reduce using rule 9 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 9 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 9 (term -> term DIVIDE factor .)
    $end            reduce using rule 9 (term -> term DIVIDE factor .)
    NUMBER          reduce using rule 9 (term -> term DIVIDE factor .)
    LPAREN          reduce using rule 9 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 9 (term -> term DIVIDE factor .)


state 16

    (14) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 14 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 14 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 14 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 14 (factor -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 14 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 14 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 14 (factor -> LPAREN expression RPAREN .)

